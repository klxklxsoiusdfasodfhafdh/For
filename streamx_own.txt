import socket
import struct
import numpy as np
import cv2
import pyautogui
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad
from windows_capture import WindowsCapture, Frame, InternalCaptureControl

target_ip = "192.168.100.108"
target_port = 9999
shared_key = b'klxklxaesosfwaaa'
cipher = AES.new(shared_key, AES.MODE_ECB)

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

# -- FOV Input --
X_FOV = int(input("Enter X FOV: "))
Y_FOV = 28  

monitor_size = pyautogui.size()
x_center = monitor_size.width // 2
y_center = monitor_size.height // 2
start_x = x_center - X_FOV // 2
start_y = y_center - Y_FOV // 2
end_x = start_x + X_FOV
end_y = start_y + Y_FOV


lwcolor = [30, 125, 150]
uprclr = [30, 255, 255]

# -- Capture Init --
capture = WindowsCapture(
    cursor_capture=None,
    draw_border=None,
    monitor_index=None,
    window_name=None,
)

@capture.event
def on_frame_arrived(
    frame: Frame,
    capture_control: InternalCaptureControl,
    mystartx=start_x,
    mystarty=start_y,
    myendx=end_x,
    myendy=end_y,
    screen_center=(X_FOV // 2, Y_FOV // 2),
    lwcolor=lwcolor,
    uprclr=uprclr,
    np=np,
    cv2=cv2,
    struct=struct,
    pad=pad,
    aes_cipher=cipher,
    udp_socket=sock,
    target_ip=target_ip,
    target_port=target_port
):
    cropped = frame.crop(mystartx, mystarty, myendx, myendy)
    img = np.array(cropped.frame_buffer, dtype=np.uint8)
    img = cv2.cvtColor(img, cv2.COLOR_BGRA2BGR)

    hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
    mask = cv2.inRange(hsv, np.array(lwcolor), np.array(uprclr))
    dilated = cv2.dilate(mask, np.ones((3, 3), np.uint8), iterations=4)
    thresh = cv2.threshold(dilated, 60, 255, cv2.THRESH_BINARY)[1]
    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)

    if contours:
        closest = min(
            (c for c in contours if cv2.boundingRect(c)[1] <= 10),
            key=lambda c: (
                (cv2.boundingRect(c)[0] + cv2.boundingRect(c)[2] // 2 - screen_center[0])**2 +
                (cv2.boundingRect(c)[1] + cv2.boundingRect(c)[3] // 2 - screen_center[1])**2
            ),
            default=None
        )
        if closest is not None:
            top_most = min(closest, key=lambda p: p[0][1])
            cX, cY = top_most[0][0], top_most[0][1]
            packed = struct.pack("!HH", cX, cY)
            encrypted = aes_cipher.encrypt(pad(packed, 16))
            udp_socket.sendto(encrypted, (target_ip, target_port))

@capture.event
def on_closed():
    sock.close()

print(f"Streaming has started with — FOV: {X_FOV}x{Y_FOV} → Sending to {target_ip}:{target_port}")
capture.start()
