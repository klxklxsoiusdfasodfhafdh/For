import socket
import struct
import numpy as np
import cv2
import pyautogui
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad
from windows_capture import WindowsCapture, Frame, InternalCaptureControl

os.system('cls')
def choose_monitor(get_monitors=get_monitors):
    monitors = get_monitors()
    if len(monitors) == 1:
        return 1
    else:
        while True:
            try:
                choice = int(input("Multiple monitors detected. Enter 1 or 2: "))
                if choice in [1, 2]:
                    return choice
            except ValueError:
                pass
            print("Invalid input. Please enter 1 or 2.")

def format_time_remaining(days, hours, minutes):
    if days >= 365:
        return "Lifetime"
    else:
        return f"{days} days, {hours} hours, {minutes} minutes remaining"
subscriptionremaining = format_time_remaining(days, hours, minutes)
os.system('cls')

def is_valid_ipv4(ip):
    parts = ip.split(".")
    if len(parts) != 4:
        return False
    for part in parts:
        if not part.isdigit():
            return False
        num = int(part)
        if num < 0 or num > 255:
            return False
        if part != str(num):  # prevents "01", "001", etc.
            return False
    return True

target_ip = input("Enter ip of second PC:")
if is_valid_ipv4(target_ip):
    print("valid ip.")
else:
    print("Invalid IP.")
    input()
    exit()

result = subprocess.run(["ping", "-n", "1", target_ip], capture_output=True, text=True)
output = result.stdout.lower()

if "destination host unreachable" in output or "request timed out" in output:
    print(f"Error: No reply from {target_ip}")
    print("IP cannot be reached, make sure both PC is in the same network.")
    input()
    exit()

print("")
target_port = 9999
shared_key = b'klxklxaesosfwaax'
cipher = AES.new(shared_key, AES.MODE_ECB)

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

X_FOV = int(get_valid_input("Enter FOV (1-1001): ", range(1, 1001)))
print("")
#print("Choose Stream Mode")
#print("1. Whole Body")
#print("2. Half Body")
#deadbody = get_valid_input("Enter Choice (1-2): ", range(1, 3))
deadbody = "2"
Y_FOV = 28  
save_logs_x(server_nickname, f" {subscriptionremaining} has started using the 2pcmak with sxf0v of ", str(X_FOV))
monitor_size = pyautogui.size()
x_center = monitor_size.width // 2
y_center = monitor_size.height // 2
start_x = x_center - X_FOV // 2
start_y = y_center - Y_FOV // 2
end_x = start_x + X_FOV
end_y = start_y + Y_FOV


lwcolor = [30, 125, 150]
uprclr = [30, 255, 255]
monitorindex = choose_monitor()
capture = WindowsCapture(
    cursor_capture=None,
    draw_border=None,
    monitor_index=monitorindex,
    window_name=None,
)

@capture.event
def on_frame_arrived(
    frame: Frame,
    capture_control: InternalCaptureControl,
    mystartx=start_x,
    mystarty=start_y,
    myendx=end_x,
    myendy=end_y,
    screen_center=(X_FOV // 2, Y_FOV // 2),
    lwcolor=lwcolor,
    uprclr=uprclr,
    np=np,
    cv2=cv2,
    struct=struct,
    pad=pad,
    aes_cipher=cipher,
    udp_socket=sock,
    target_ip=target_ip,
    target_port=target_port,
    seconds_left=seconds_left,
    deadbody=deadbody
):
    if seconds_left <= 0:
        os.system('cls')
        print("---------------------------")
        print("Key expired.")
        input()
        sys.exit()
    cropped = frame.crop(mystartx, mystarty, myendx, myendy)
    img = np.array(cropped.frame_buffer, dtype=np.uint8)
    img = cv2.cvtColor(img, cv2.COLOR_BGRA2BGR)

    hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
    mask = cv2.inRange(hsv, np.array(lwcolor), np.array(uprclr))
    dilated = cv2.dilate(mask, np.ones((3, 3), np.uint8), iterations=4)
    thresh = cv2.threshold(dilated, 60, 255, cv2.THRESH_BINARY)[1]
    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)

    if contours:
        closest = min(
            (c for c in contours if not (cv2.boundingRect(c)[1] > 10 and deadbody == "2")),
            key=lambda c: (
                (cv2.boundingRect(c)[0] + cv2.boundingRect(c)[2] // 2 - screen_center[0])**2 +
                (cv2.boundingRect(c)[1] + cv2.boundingRect(c)[3] // 2 - screen_center[1])**2
            ),
            default=None
        )
        if closest is not None:
            top_most = min(closest, key=lambda p: p[0][1])
            cX, cY = top_most[0][0], top_most[0][1]
            packed = struct.pack("!HH", cX, cY)
            encrypted = aes_cipher.encrypt(pad(packed, 16))
            udp_socket.sendto(encrypted, (target_ip, target_port))

@capture.event
def on_closed():
    sock.close()

print("")
print(f"Streaming has started to FOV: {X_FOV} {target_ip}:{target_port}")
print(f"Subscription: {subscriptionremaining}")
capture.start()

